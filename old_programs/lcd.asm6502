; IO Adapter
PA = $6001
PB = $6000
DDRA = $6003
DDRB = $6002

; RAM VARIABLES
LCD_CHARCOUNT = $1000

; LCD Control 
LCD_E = %10000000
LCD_RW = %01000000
LCD_RS = %00100000
LCD_CLEAR = %00000000
; LCD Instructions
LCD_CD = %00000001  ; clear display
LCD_ON = %00001111  ; everything on
LCD_SC = %00000110  ; shift cursor
; LCD Constants
LCD_L1 = $00        ; line 1
LCD_L2 = $40
LCD_L3 = $10
LCD_L4 = $50

    .org $8000  ; wo das zeug drunter stehen soll

reset:
    lda #$ff  ; PB0-7 auf output
    sta DDRB
    lda #%11100000 ; PA5-7 auf output
    sta DDRA
     
    ; clear_lcd: 
    lda #%00111000  ; 8-bit, 4 zeilen
    jsr lcd_cmd
    lda #%00001111  ; lcd on
    jsr lcd_cmd
    lda #LCD_CD     ; clear display
    jsr lcd_cmd
    lda #%00000110  ; auto shift, kein scrollen    
    jsr lcd_cmd
    ; set charcount to 0
    lda #$00
    sta LCD_CHARCOUNT
    jsr print
    jsr print
    jsr print_clear
    jsr print
loop:
    jmp loop

;********************************************************************************
; PRINTING TO LCD
; Code below will be copied to RAM and called from there!
;********************************************************************************
print_clear:              ; clear lcd and print word located at message
    lda #$00
    sta LCD_CHARCOUNT
    lda #LCD_CLEAR
    jsr lcd_cmd
print:
    ldx #$00
print_:
    lda message,x
    beq print_end
    jsr lcd_char
    inx
    inc LCD_CHARCOUNT
    jmp print_
print_end:
    rts
    .word $00
    
message: .asciiz "Alles Gute zum Geburtstag!"
;********************************************************************************
; LCD Commands
;********************************************************************************
; read busy flag
lcd_wait:
    pha             ; push A on stack
    lda #%00000000  ; set IO1-PB to input
    sta DDRB
lcd_wait_:     ; read the busy flag
    lda #LCD_RW
    sta PA
    lda #(LCD_RW | LCD_E)
    sta PA
    
    lda PB
    and #%10000000   ; and updates zero flag, if not set retry
    bne lcd_wait_
    
    lda #LCD_CLEAR
    sta PA
    lda #%11111111   ; set IO1-PB to output
    sta DDRB
    pla              ; pull A back from stack
    rts
    
lcd_cmd:    
    jsr lcd_wait

    sta PB
    lda #LCD_CLEAR
    sta PA
    lda #LCD_E
    sta PA
    lda #LCD_CLEAR
    sta PA
    rts

lcd_char:
    pha
    jsr lcd_set_address
    pla
    jsr lcd_wait
    sta PB
    lda #LCD_RS
    sta PA
    lda #(LCD_RS | LCD_E) 
    sta PA
    lda #LCD_RS
    sta PA
    rts
;********************************************************************************
; Set the LCD DD-RAM Address so that text linebreaks after 16 chars
;********************************************************************************
lcd_set_address:
    lda LCD_CHARCOUNT
    beq lcd_line1
    cmp #$10
    beq lcd_line2
    cmp #$20
    beq lcd_line3
    cmp #$30
    beq lcd_line4
    rts
lcd_line1:
    lda #(%10000000 | LCD_L1)
    jsr lcd_cmd
    rts
lcd_line2:
    lda #(%10000000 | LCD_L2)
    jsr lcd_cmd
    rts
lcd_line3:
    lda #(%10000000 | LCD_L3)
    jsr lcd_cmd
    rts
lcd_line4:
    lda #(%10000000 | LCD_L4)
    jsr lcd_cmd
    rts
    
    ; reset vector
    .org $fffc      
    .word reset          ; word setzt einfach ein byte an die stelle
    ; file auf√ºllen
    .word $eaea
